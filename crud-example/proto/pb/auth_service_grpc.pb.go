// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.6.1
// source: auth_service.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AuthServiceClient is the client API for AuthService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AuthServiceClient interface {
	Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error)
	VerifyLoginUsingEmail(ctx context.Context, in *VerifyLoginUsingEmailRequest, opts ...grpc.CallOption) (*VerifyLoginUsingEmailResponse, error)
	AuthMe(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*User, error)
	Logout(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Successful, error)
	ForgotPassword(ctx context.Context, in *ForgotPasswordRequest, opts ...grpc.CallOption) (*ExpiryTime, error)
	ChangePassword(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ExpiryTime, error)
	VerifyForgotPassword(ctx context.Context, in *VerifyForgotPasswordRequest, opts ...grpc.CallOption) (*Successful, error)
	VerifyChangePassword(ctx context.Context, in *VerifyChangePasswordRequest, opts ...grpc.CallOption) (*Successful, error)
	ResetPassword(ctx context.Context, in *ResetPasswordRequest, opts ...grpc.CallOption) (*Successful, error)
	ResetChangePassword(ctx context.Context, in *ResetChangePasswordRequest, opts ...grpc.CallOption) (*Successful, error)
	ResendVerifyCodeLogin(ctx context.Context, in *ResendVerifyCodeRequest, opts ...grpc.CallOption) (*ExpiryTime, error)
	ResendVerifyCodeForgotPassword(ctx context.Context, in *ForgotPasswordRequest, opts ...grpc.CallOption) (*ExpiryTime, error)
	ResendVerifyCodeChangePassword(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ExpiryTime, error)
}

type authServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAuthServiceClient(cc grpc.ClientConnInterface) AuthServiceClient {
	return &authServiceClient{cc}
}

func (c *authServiceClient) Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error) {
	out := new(LoginResponse)
	err := c.cc.Invoke(ctx, "/auth.AuthService/Login", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) VerifyLoginUsingEmail(ctx context.Context, in *VerifyLoginUsingEmailRequest, opts ...grpc.CallOption) (*VerifyLoginUsingEmailResponse, error) {
	out := new(VerifyLoginUsingEmailResponse)
	err := c.cc.Invoke(ctx, "/auth.AuthService/VerifyLoginUsingEmail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) AuthMe(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := c.cc.Invoke(ctx, "/auth.AuthService/AuthMe", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) Logout(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Successful, error) {
	out := new(Successful)
	err := c.cc.Invoke(ctx, "/auth.AuthService/Logout", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) ForgotPassword(ctx context.Context, in *ForgotPasswordRequest, opts ...grpc.CallOption) (*ExpiryTime, error) {
	out := new(ExpiryTime)
	err := c.cc.Invoke(ctx, "/auth.AuthService/ForgotPassword", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) ChangePassword(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ExpiryTime, error) {
	out := new(ExpiryTime)
	err := c.cc.Invoke(ctx, "/auth.AuthService/ChangePassword", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) VerifyForgotPassword(ctx context.Context, in *VerifyForgotPasswordRequest, opts ...grpc.CallOption) (*Successful, error) {
	out := new(Successful)
	err := c.cc.Invoke(ctx, "/auth.AuthService/VerifyForgotPassword", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) VerifyChangePassword(ctx context.Context, in *VerifyChangePasswordRequest, opts ...grpc.CallOption) (*Successful, error) {
	out := new(Successful)
	err := c.cc.Invoke(ctx, "/auth.AuthService/VerifyChangePassword", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) ResetPassword(ctx context.Context, in *ResetPasswordRequest, opts ...grpc.CallOption) (*Successful, error) {
	out := new(Successful)
	err := c.cc.Invoke(ctx, "/auth.AuthService/ResetPassword", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) ResetChangePassword(ctx context.Context, in *ResetChangePasswordRequest, opts ...grpc.CallOption) (*Successful, error) {
	out := new(Successful)
	err := c.cc.Invoke(ctx, "/auth.AuthService/ResetChangePassword", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) ResendVerifyCodeLogin(ctx context.Context, in *ResendVerifyCodeRequest, opts ...grpc.CallOption) (*ExpiryTime, error) {
	out := new(ExpiryTime)
	err := c.cc.Invoke(ctx, "/auth.AuthService/ResendVerifyCodeLogin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) ResendVerifyCodeForgotPassword(ctx context.Context, in *ForgotPasswordRequest, opts ...grpc.CallOption) (*ExpiryTime, error) {
	out := new(ExpiryTime)
	err := c.cc.Invoke(ctx, "/auth.AuthService/ResendVerifyCodeForgotPassword", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) ResendVerifyCodeChangePassword(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ExpiryTime, error) {
	out := new(ExpiryTime)
	err := c.cc.Invoke(ctx, "/auth.AuthService/ResendVerifyCodeChangePassword", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AuthServiceServer is the server API for AuthService service.
// All implementations should embed UnimplementedAuthServiceServer
// for forward compatibility
type AuthServiceServer interface {
	Login(context.Context, *LoginRequest) (*LoginResponse, error)
	VerifyLoginUsingEmail(context.Context, *VerifyLoginUsingEmailRequest) (*VerifyLoginUsingEmailResponse, error)
	AuthMe(context.Context, *Empty) (*User, error)
	Logout(context.Context, *Empty) (*Successful, error)
	ForgotPassword(context.Context, *ForgotPasswordRequest) (*ExpiryTime, error)
	ChangePassword(context.Context, *Empty) (*ExpiryTime, error)
	VerifyForgotPassword(context.Context, *VerifyForgotPasswordRequest) (*Successful, error)
	VerifyChangePassword(context.Context, *VerifyChangePasswordRequest) (*Successful, error)
	ResetPassword(context.Context, *ResetPasswordRequest) (*Successful, error)
	ResetChangePassword(context.Context, *ResetChangePasswordRequest) (*Successful, error)
	ResendVerifyCodeLogin(context.Context, *ResendVerifyCodeRequest) (*ExpiryTime, error)
	ResendVerifyCodeForgotPassword(context.Context, *ForgotPasswordRequest) (*ExpiryTime, error)
	ResendVerifyCodeChangePassword(context.Context, *Empty) (*ExpiryTime, error)
}

// UnimplementedAuthServiceServer should be embedded to have forward compatible implementations.
type UnimplementedAuthServiceServer struct {
}

func (UnimplementedAuthServiceServer) Login(context.Context, *LoginRequest) (*LoginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedAuthServiceServer) VerifyLoginUsingEmail(context.Context, *VerifyLoginUsingEmailRequest) (*VerifyLoginUsingEmailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyLoginUsingEmail not implemented")
}
func (UnimplementedAuthServiceServer) AuthMe(context.Context, *Empty) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AuthMe not implemented")
}
func (UnimplementedAuthServiceServer) Logout(context.Context, *Empty) (*Successful, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Logout not implemented")
}
func (UnimplementedAuthServiceServer) ForgotPassword(context.Context, *ForgotPasswordRequest) (*ExpiryTime, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ForgotPassword not implemented")
}
func (UnimplementedAuthServiceServer) ChangePassword(context.Context, *Empty) (*ExpiryTime, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangePassword not implemented")
}
func (UnimplementedAuthServiceServer) VerifyForgotPassword(context.Context, *VerifyForgotPasswordRequest) (*Successful, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyForgotPassword not implemented")
}
func (UnimplementedAuthServiceServer) VerifyChangePassword(context.Context, *VerifyChangePasswordRequest) (*Successful, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyChangePassword not implemented")
}
func (UnimplementedAuthServiceServer) ResetPassword(context.Context, *ResetPasswordRequest) (*Successful, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResetPassword not implemented")
}
func (UnimplementedAuthServiceServer) ResetChangePassword(context.Context, *ResetChangePasswordRequest) (*Successful, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResetChangePassword not implemented")
}
func (UnimplementedAuthServiceServer) ResendVerifyCodeLogin(context.Context, *ResendVerifyCodeRequest) (*ExpiryTime, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResendVerifyCodeLogin not implemented")
}
func (UnimplementedAuthServiceServer) ResendVerifyCodeForgotPassword(context.Context, *ForgotPasswordRequest) (*ExpiryTime, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResendVerifyCodeForgotPassword not implemented")
}
func (UnimplementedAuthServiceServer) ResendVerifyCodeChangePassword(context.Context, *Empty) (*ExpiryTime, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResendVerifyCodeChangePassword not implemented")
}

// UnsafeAuthServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AuthServiceServer will
// result in compilation errors.
type UnsafeAuthServiceServer interface {
	mustEmbedUnimplementedAuthServiceServer()
}

func RegisterAuthServiceServer(s grpc.ServiceRegistrar, srv AuthServiceServer) {
	s.RegisterService(&AuthService_ServiceDesc, srv)
}

func _AuthService_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.AuthService/Login",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).Login(ctx, req.(*LoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_VerifyLoginUsingEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyLoginUsingEmailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).VerifyLoginUsingEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.AuthService/VerifyLoginUsingEmail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).VerifyLoginUsingEmail(ctx, req.(*VerifyLoginUsingEmailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_AuthMe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).AuthMe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.AuthService/AuthMe",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).AuthMe(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_Logout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).Logout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.AuthService/Logout",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).Logout(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_ForgotPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ForgotPasswordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).ForgotPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.AuthService/ForgotPassword",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).ForgotPassword(ctx, req.(*ForgotPasswordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_ChangePassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).ChangePassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.AuthService/ChangePassword",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).ChangePassword(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_VerifyForgotPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyForgotPasswordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).VerifyForgotPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.AuthService/VerifyForgotPassword",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).VerifyForgotPassword(ctx, req.(*VerifyForgotPasswordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_VerifyChangePassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyChangePasswordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).VerifyChangePassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.AuthService/VerifyChangePassword",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).VerifyChangePassword(ctx, req.(*VerifyChangePasswordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_ResetPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResetPasswordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).ResetPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.AuthService/ResetPassword",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).ResetPassword(ctx, req.(*ResetPasswordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_ResetChangePassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResetChangePasswordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).ResetChangePassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.AuthService/ResetChangePassword",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).ResetChangePassword(ctx, req.(*ResetChangePasswordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_ResendVerifyCodeLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResendVerifyCodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).ResendVerifyCodeLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.AuthService/ResendVerifyCodeLogin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).ResendVerifyCodeLogin(ctx, req.(*ResendVerifyCodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_ResendVerifyCodeForgotPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ForgotPasswordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).ResendVerifyCodeForgotPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.AuthService/ResendVerifyCodeForgotPassword",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).ResendVerifyCodeForgotPassword(ctx, req.(*ForgotPasswordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_ResendVerifyCodeChangePassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).ResendVerifyCodeChangePassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.AuthService/ResendVerifyCodeChangePassword",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).ResendVerifyCodeChangePassword(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// AuthService_ServiceDesc is the grpc.ServiceDesc for AuthService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AuthService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "auth.AuthService",
	HandlerType: (*AuthServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Login",
			Handler:    _AuthService_Login_Handler,
		},
		{
			MethodName: "VerifyLoginUsingEmail",
			Handler:    _AuthService_VerifyLoginUsingEmail_Handler,
		},
		{
			MethodName: "AuthMe",
			Handler:    _AuthService_AuthMe_Handler,
		},
		{
			MethodName: "Logout",
			Handler:    _AuthService_Logout_Handler,
		},
		{
			MethodName: "ForgotPassword",
			Handler:    _AuthService_ForgotPassword_Handler,
		},
		{
			MethodName: "ChangePassword",
			Handler:    _AuthService_ChangePassword_Handler,
		},
		{
			MethodName: "VerifyForgotPassword",
			Handler:    _AuthService_VerifyForgotPassword_Handler,
		},
		{
			MethodName: "VerifyChangePassword",
			Handler:    _AuthService_VerifyChangePassword_Handler,
		},
		{
			MethodName: "ResetPassword",
			Handler:    _AuthService_ResetPassword_Handler,
		},
		{
			MethodName: "ResetChangePassword",
			Handler:    _AuthService_ResetChangePassword_Handler,
		},
		{
			MethodName: "ResendVerifyCodeLogin",
			Handler:    _AuthService_ResendVerifyCodeLogin_Handler,
		},
		{
			MethodName: "ResendVerifyCodeForgotPassword",
			Handler:    _AuthService_ResendVerifyCodeForgotPassword_Handler,
		},
		{
			MethodName: "ResendVerifyCodeChangePassword",
			Handler:    _AuthService_ResendVerifyCodeChangePassword_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "auth_service.proto",
}
